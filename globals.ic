/***************************************************************************
 *   Copyright (C) 2012 by Tobias Volk                                     *
 *   mail@tobiasvolk.de                                                    *
 *                                                                         *
 *   This program is free software: you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation, either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 ***************************************************************************/


// version information
#define PEERVPN_VERSION_MAJOR 0
#define PEERVPN_VERSION_MINOR 20


// compile time options & timing parameters
#define INITPEER_STORAGE 1024
#define CLIENTID_LENGTH 16
#define COMMAND_BUFSIZE 1024
#define POLLWAIT 100


// file descriptor positions
#define FDID_CONSOLE 0
#define FDID_SOCKET 1
#define FDID_TAP 2
#define FDID_COUNT 3


// peer address positions & lenghts
#define PEERADDR_START 0
#define PEERADDR_LENGTH 18
#define PEERADDR_IP_START 0
#define PEERADDR_IP_LENGTH 16
#define PEERADDR_IPV4_START 12
#define PEERADDR_IPV4_LENGTH 4
#define PEERADDR_PORT_START 16
#define PEERADDR_PORT_LENGTH 2


// config parser options
#define CONFPARSER_LINEBUF_SIZE 4096
#define CONFPARSER_NAMEBUF_SIZE 512


// constraints
#if PEERADDR_IP_LENGTH < 16
#error
#endif
#if PEERADDR_PORT_LENGTH < 2
#error
#endif
#if PEERCOUNT_HARDLIMIT > 254
#error
#endif
#if PEERCOUNT_SOFTLIMIT > PEERCOUNT_HARDLIMIT
#error
#endif


// structures
struct s_clientid {
	u_int8_t id[CLIENTID_LENGTH];
};
struct s_initconfig {
	char sourceip[CONFPARSER_NAMEBUF_SIZE+1];
	char sourceport[CONFPARSER_NAMEBUF_SIZE+1];
	char tapname[CONFPARSER_NAMEBUF_SIZE+1];
	char userstr[CONFPARSER_NAMEBUF_SIZE+1];
	char groupstr[CONFPARSER_NAMEBUF_SIZE+1];
	char chrootstr[CONFPARSER_NAMEBUF_SIZE+1];
	char networkname[CONFPARSER_NAMEBUF_SIZE+1];
	char upcmd[CONFPARSER_NAMEBUF_SIZE+1];
	char initpeers[CONFPARSER_NAMEBUF_SIZE+1];
	char engines[CONFPARSER_NAMEBUF_SIZE+1];
	char password[CONFPARSER_NAMEBUF_SIZE+1];
	int password_len;
	int enableindirect;
	int enablerelay;
	int enableeth;
	int enableconsole;
};


// global constants
const struct s_peeraddr g_zeroaddr = { .addr = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}};
const struct s_peeraddr g_v4addr = { .addr = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00}};


// global variables
P2PSEC_CTX *g_p2psec;
long g_starttime;
struct sockaddr_in6 g_saddr;
struct pollfd g_fd[FDID_COUNT];
int g_mainloop;
int g_saddrlen;
char g_initpeers[INITPEER_STORAGE+1];
struct s_map g_mactable;
int g_enableeth;
int g_enableengines;
